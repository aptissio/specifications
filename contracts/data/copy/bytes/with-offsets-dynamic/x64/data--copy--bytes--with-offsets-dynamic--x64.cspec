{
  "type": "supplier",
  "supplier": "aptissio",
  "name": "/data/copy/bytes/with-offsets-dynamic/x64",
  "description": [
    "#defaults: data, default, x64",
    "",
    "Copy ``bytes``.",
    "Copy a /number/ of bytes from /source/ bytes to a /target/ bytes. The first byte copied from the /source/ will be offset from the beginning of the /source/ bytes by /source offset/. The stored in the /target/ bytes will be offset from the beginning of the /target/ bytes by /target offset/.",
    "A /failure/ is triggered if the number of bytes that _can_ be copied is less that the required /number/ of bytes. This may occur if:",
    "+ the copy operation would source bytes beyond the end of /source/.",
    "+ the copy operation would store bytes beyond the end of /target/.",
    "Note: If /number/ of bytes cannot be copied, then no bytes are copied.",
    "",
    "This operation is suitable for copying data within the same structure, including copying data from the beginning of the target region later in the copy operation. (e.g. if target offset > source offset.)"
  ],
  "requirements": [
    {
      "type": "abstraction",
      "name": "out = copy(in, number, offset)",
      "protocol": "/data/flow/default/x64"
    },
    {
      "type": "abstraction",
      "name": "number",
      "protocol": "/data/integer/default/x64"
    },
    {
      "type": "abstraction",
      "name": "source offset",
      "protocol": "/data/integer/default/x64"
    },
    {
      "type": "abstraction",
      "name": "target offset",
      "protocol": "/data/integer/default/x64"
    },
    {
      "type": "abstraction",
      "name": "source",
      "protocol": "/data/bytes/default/x64"
    },
    {
      "type": "abstraction",
      "name": "target",
      "protocol": "/data/bytes/default/x64"
    }
  ],
  "obligations": [
    {
      "type": "abstraction",
      "name": "success",
      "protocol": "/data/flow/default/x64"
    },
    {
      "type": "abstraction",
      "name": "failure",
      "protocol": "/data/flow/default/x64"
    }
  ]
}
