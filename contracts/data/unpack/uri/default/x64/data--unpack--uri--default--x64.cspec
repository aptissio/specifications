{
  "type": "supplier",
  "supplier": "aptissio",
  "name": "/data/unpack/uri/default/x64",
  "description": [
    "URI - Uniform Resource Identifier",
    "",
    "Unpack a uri components but don't set URI.",
    "",
    "This contract is capable to unpack segments of URI or URI as whole. Because the supply of URI can come from various sources, this contract can't guarantee it creates valid URI so it provides all the URI components but it is up to client to know what components are expected to be valid and use them to create URI with contract /data/set/uri/default/x64 to guarantee to have valid URI.",
    "",
    "Example: URL in the http request is compounded in following string:",
    "",
    "    \"GET /path/to/resource?value=1&value2=up#top-of-the-page HTTP/1.1\"",
    "",
    "Client can expect the path, query and fragment to be valid, but the scheme nor authority are present. Unpacking this string could potentially result in creating invalid URI so the contract provide",
    "",
    "`Includes scheme` set to **TRUE** if there is scheme. The unpack may not have schema in stream. If that's the case set this to **FALSE**.",
    "",
    "`Scheme`, `authority`, `path`, `query` and `fragment` max lengths to be defined by client at the build time.",
    "",
    "`scheme`, `authority`, `path`, `query` and `fragment` are found and unpacked components without URI validation.",
    "",
    "Works on basis of the rfc3986 standards [https://datatracker.ietf.org/doc/html/rfc3986]"
  ],
  "requirements": [
    {
      "type": "abstraction",
      "name": "unpack",
      "protocol": "/data/unpack/default/x64"
    },
    {
      "type": "boolean",
      "name": "includes scheme"
    },
    {
      "type": "integer",
      "name": "scheme length max",
      "minimum": "0",
      "maximum": "9223372036854775807",
      "hint": "0 to 2^63-1"
    },
    {
      "type": "integer",
      "name": "authority length max",
      "minimum": "0",
      "maximum": "9223372036854775807",
      "hint": "0 to 2^63-1"
    },
    {
      "type": "integer",
      "name": "path length max",
      "minimum": "0",
      "maximum": "9223372036854775807",
      "hint": "0 to 2^63-1"
    },
    {
      "type": "integer",
      "name": "query length max",
      "minimum": "0",
      "maximum": "9223372036854775807",
      "hint": "0 to 2^63-1"
    },
    {
      "type": "integer",
      "name": "fragment length max",
      "minimum": "0",
      "maximum": "9223372036854775807",
      "hint": "0 to 2^63-1"
    }
  ],
  "obligations": [
    {
      "type": "abstraction",
      "name": "scheme",
      "protocol": "/data/bytesequence/default/x64"
    },
    {
      "type": "abstraction",
      "name": "authority present flag",
      "protocol": "/data/flag/default/x64"
    },
    {
      "type": "abstraction",
      "name": "authority",
      "protocol": "/data/bytesequence/default/x64"
    },
    {
      "type": "abstraction",
      "name": "path",
      "protocol": "/data/bytesequence/default/x64"
    },
    {
      "type": "abstraction",
      "name": "query",
      "protocol": "/data/bytesequence/default/x64"
    },
    {
      "type": "abstraction",
      "name": "fragment",
      "protocol": "/data/bytesequence/default/x64"
    }
  ]
}