{
  "type": "supplier",
  "supplier": "aptissio",
  "name": "/data/new/finite-state-machine/default/linux-x64",
  "description": [
    "Create a new `finite state machine` using the `initial state` supplied by the client.",
    "The client is also responsible for providing the structure, and flows to store, initialise (construct), cleanup (deconstruct) state-variables and `finite state machine events`.",
    "",
    "The client is responsible for defining the states, transitions and events for their finite state machine design.",
    "Refer:",
    "- `/data/new/finite-state-machine-state/default/x64`",
    "- `/data/new/finite-state-machine-transition/default/x64`",
    "- `/data/new/finite-state-machine-event/default/x64`",
    "- `/data/register/finite-state-machine-transition/event/x64`",
    "",
    "The state machine will not enter the initial state until it is \"reset\" (see `/data/reset/finite-state-machine/default/x64`).",
    "",
    "The client may provide a `fsm enabled` condition to stop the operation of the finite state machine (disable state transitioning). When the condition transitions to \"enabled\", the machine will resume operation from the state in which it was disabled and no other special processing occurs.",
    "",
    "When an event is triggered (refer: `/data/trigger/finite-state-machine/default/x64`), transitions that have the given `event` registered will be evaluated first. The first event-registered transition whose guard conditions are met will occur. All other event-registered transitions are ignored.",
    "",
    "Following the evaluation and action of event-registered transitions, and the \"entry\" work of the new state, \"immediate\" transitions are then evaluated within the context of the new state. The first \"immediate\" transition whose guard conditions are met will occur. All other \"immediate\" transitions will be ignored.",
    "",
    "Transitions are evaluated in the order in which they are added into the finite state machine design."
  ],
  "requirements": [
    {
      "type": "abstraction",
      "name": "initialise",
      "protocol": "/data/flow/default/x64"
    },
    {
      "type": "abstraction",
      "name": "fsm variable",
      "protocol": "/data/structure/default/x64"
    },
    {
      "type": "abstraction",
      "name": "fsm variable initialise",
      "protocol": "/data/flow/default/x64"
    },
    {
      "type": "abstraction",
      "name": "fsm variable cleanup",
      "protocol": "/data/flow/default/x64"
    },
    {
      "type": "abstraction",
      "name": "finite state machine events",
      "protocol": "/data/finite-state-machine-events/default/x64"
    },
    {
      "type": "integer",
      "name": "initial state",
      "minimum": "0",
      "maximum": "9223372036854775807",
      "hint": "0 to (2^63)-1"
    }
  ],
  "obligations": [
    {
      "type": "abstraction",
      "name": "finite state machine",
      "protocol": "/data/finite-state-machine/default/x64"
    },
    {
      "type": "abstraction",
      "name": "fsm enabled",
      "protocol": "/data/boolean-condition/default/x64"
    }
  ]
}