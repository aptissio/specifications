{"name": "/system/peer-communications-channel/default/x64",
"type": "protocol",
"policy":"0",
"description":[""],
"host": {
"requirements": [
{"name":  "initialisation",
"type": "abstraction",
"protocol": "/data/flow/default/x64"},
{"name":  "peer communications",
"type": "abstraction",
"protocol": "/system/peer-communications/default/x64"},
{"name":  "channel ID",
"type": "string",
"length": "3",
"hint": "3"},
{"name":  "recv source channel ID",
"type": "abstraction",
"protocol": "/data/bytesequence/default/x64"},
{"name":  "recv peer ID",
"type": "abstraction",
"protocol": "/data/integer/default/x64"},
{"name":  "recv msg format choices",
"type": "abstraction",
"protocol": "/data/unpack/default/x64"},
{"name":  "send destination channel",
"type": "abstraction",
"protocol": "/data/bytesequence/default/x64"},
{"name":  "send peer ID",
"type": "abstraction",
"protocol": "/data/integer/default/x64"},
{"name":  "send token in",
"type": "abstraction",
"protocol": "/data/integer/default/x64"},
{"name":  "send data",
"type": "abstraction",
"protocol": "/data/bytesequence/default/x64"},
{"name":  "send callback procedure",
"type": "abstraction",
"protocol": "/data/procedure/default/x64"},
{"name":  "send procedure",
"type": "abstraction",
"protocol": "/data/procedure/default/x64"},
{"name":  "send token out",
"type": "abstraction",
"protocol": "/data/integer/default/x64"},
{"name":  "send result code",
"type": "abstraction",
"protocol": "/data/integer/default/x64"}
],
"obligations": [
{"name":  "maximum message length",
"type": "integer",
"minimum": "0",
"maximum": "9223372036854775807",
"hint": "0 to (2^63)-1"},
{"name": "<self>",
"type": "abstraction",
"protocol": "/system/peer-communications-channel/default/x64"}
], 
"macro":  ["def (acs, initialisation, peer_communications, channel_ID, recv_source_channel_ID, recv_peer_ID, recv_msg_format_choices, send_destination_channel, send_peer_ID, send_token_in, send_data, send_callback_procedure, send_procedure, send_token_out, send_result_code, maximum_message_length, self, trigger, debug_msg) :",
"sub /behaviour/add/collaboration-endpoint/host/x64@codevalley(acs, self, trigger, debug_msg) -> {",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, initialisation, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, peer_communications, trigger, debug_msg)",
"sub /behaviour/dictate/agent-string/default/x64@codevalley(acs, $, channel_ID, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, recv_source_channel_ID, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, recv_peer_ID, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, recv_msg_format_choices, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, send_destination_channel, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, send_peer_ID, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, send_token_in, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, send_data, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, send_callback_procedure, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, send_procedure, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, send_token_out, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, send_result_code, trigger, debug_msg)",
"sub /behaviour/collect/agent-integer/maximum/x64@codevalley(acs, $, maximum_message_length, trigger, debug_msg)",
"}",
"end"]
},
"join": {
"requirements": [
{"name":  "maximum message length",
"type": "integer",
"minimum": "0",
"maximum": "9223372036854775807",
"hint": "0 to (2^63)-1"},
{"name": "<self>",
"type": "abstraction",
"protocol": "/system/peer-communications-channel/default/x64"}
],
"obligations": [
{"name":  "initialisation",
"type": "abstraction",
"protocol": "/data/flow/default/x64"},
{"name":  "peer communications",
"type": "abstraction",
"protocol": "/system/peer-communications/default/x64"},
{"name":  "channel ID",
"type": "string",
"length": "3",
"hint": "3"},
{"name":  "recv source channel ID",
"type": "abstraction",
"protocol": "/data/bytesequence/default/x64"},
{"name":  "recv peer ID",
"type": "abstraction",
"protocol": "/data/integer/default/x64"},
{"name":  "recv msg format choices",
"type": "abstraction",
"protocol": "/data/unpack/default/x64"},
{"name":  "send destination channel",
"type": "abstraction",
"protocol": "/data/bytesequence/default/x64"},
{"name":  "send peer ID",
"type": "abstraction",
"protocol": "/data/integer/default/x64"},
{"name":  "send token in",
"type": "abstraction",
"protocol": "/data/integer/default/x64"},
{"name":  "send data",
"type": "abstraction",
"protocol": "/data/bytesequence/default/x64"},
{"name":  "send callback procedure",
"type": "abstraction",
"protocol": "/data/procedure/default/x64"},
{"name":  "send procedure",
"type": "abstraction",
"protocol": "/data/procedure/default/x64"},
{"name":  "send token out",
"type": "abstraction",
"protocol": "/data/integer/default/x64"},
{"name":  "send result code",
"type": "abstraction",
"protocol": "/data/integer/default/x64"}
],
"macro":  ["def (acs, maximum_message_length, self, initialisation, peer_communications, channel_ID, recv_source_channel_ID, recv_peer_ID, recv_msg_format_choices, send_destination_channel, send_peer_ID, send_token_in, send_data, send_callback_procedure, send_procedure, send_token_out, send_result_code,  trigger, debug_msg) :",
"sub /behaviour/add/collaboration-endpoint/join/x64@codevalley(acs, self, trigger, debug_msg) -> {",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, initialisation, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, peer_communications, trigger, debug_msg)",
"sub /behaviour/accept/agent-string/default/x64@codevalley(acs, $, channel_ID, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, recv_source_channel_ID, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, recv_peer_ID, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, recv_msg_format_choices, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, send_destination_channel, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, send_peer_ID, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, send_token_in, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, send_data, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, send_callback_procedure, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, send_procedure, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, send_token_out, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, send_result_code, trigger, debug_msg)",
"sub /behaviour/fold/agent-integer/maximum/x64@codevalley(acs, $, maximum_message_length, trigger, debug_msg)",
"}",
"end"]
}
}
