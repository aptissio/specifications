{
  "type": "protocol",
  "policy": 0,
  "name": "/behaviour/tcp-messenger/default/x64",
  "description": [
    "Design a peer-to-peer messenger feature that manages TCP-based connections to permit adhoc peer communication."
  ],
  "host": {
    "requirements": [
      {
        "type": "abstraction",
        "name": "application core",
        "protocol": "/system/execution-bundle/default/x64"
      },
      {
        "type": "abstraction",
        "name": "connection activity timeout",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "bind address",
        "protocol": "/data/network-address/default/x64"
      },
      {
        "type": "abstraction",
        "name": "start messenger",
        "protocol": "/data/procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "messenger started",
        "protocol": "/data/flow/default/x64"
      },
      {
        "type": "abstraction",
        "name": "messenger start error code",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "messenger start failed (error code)",
        "protocol": "/data/flow/default/x64"
      },
      {
        "type": "abstraction",
        "name": "stop messenger",
        "protocol": "/data/procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "messenger stopped",
        "protocol": "/data/flow/default/x64"
      },
      {
        "type": "abstraction",
        "name": "stop messenger error code",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "stop messenger failed(error code)",
        "protocol": "/data/flow/default/x64"
      },
      {
        "type": "abstraction",
        "name": "send message token",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "send message address",
        "protocol": "/data/network-address/default/x64"
      },
      {
        "type": "abstraction",
        "name": "message to send",
        "protocol": "/data/bytesequence/default/x64"
      },
      {
        "type": "abstraction",
        "name": "send message procedure",
        "protocol": "/data/procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "send message callback token",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "send message result code",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "message sent (callback token, result code)",
        "protocol": "/data/procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "receive filter address",
        "protocol": "/data/network-address/default/x64"
      },
      {
        "type": "abstraction",
        "name": "add receive whitelist (filter address)",
        "protocol": "/data/procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "add receive blacklist (filter address)",
        "protocol": "/data/procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "received data",
        "protocol": "/data/bytesequence/default/x64"
      },
      {
        "type": "abstraction",
        "name": "received from address",
        "protocol": "/data/network-address/default/x64"
      },
      {
        "type": "abstraction",
        "name": "data received",
        "protocol": "/data/flow/default/x64"
      }
    ],
    "obligations": [
      {
        "type": "integer",
        "name": "maximum message length",
        "minimum": "0",
        "maximum": "9223372036854775807",
        "hint": "0 to (2^63)-1"
      },
      {
        "type": "abstraction",
        "name": "COLLABORATION",
        "protocol": "/behaviour/tcp-messenger/default/x64"
      }
    ],
    "macro": [
      "def (acs, application_core, connection_activity_timeout, bind_address, start_messenger, messenger_started, messenger_start_error_code, messenger_start_failed__error_code_, stop_messenger, messenger_stopped, stop_messenger_error_code, stop_messenger_failed_error_code_, send_message_token, send_message_address, message_to_send, send_message_procedure, send_message_callback_token, send_message_result_code, message_sent__callback_token__result_code_, receive_filter_address, add_receive_whitelist__filter_address_, add_receive_blacklist__filter_address_, received_data, received_from_address, data_received, maximum_message_length, self, trigger, debug_msg) :",
      "sub /behaviour/add/collaboration-endpoint/host/x64@codevalley( acs, self, trigger, debug_msg) -> {",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, application_core, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, connection_activity_timeout, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, bind_address, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, start_messenger, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, messenger_started, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, messenger_start_error_code, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, messenger_start_failed__error_code_, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, stop_messenger, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, messenger_stopped, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, stop_messenger_error_code, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, stop_messenger_failed_error_code_, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, send_message_token, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, send_message_address, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, message_to_send, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, send_message_procedure, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, send_message_callback_token, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, send_message_result_code, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, message_sent__callback_token__result_code_, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, receive_filter_address, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, add_receive_whitelist__filter_address_, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, add_receive_blacklist__filter_address_, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, received_data, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, received_from_address, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, data_received, trigger, debug_msg)",
      "sub /behaviour/collect/agent-integer/maximum/x64@codevalley( acs, $, maximum_message_length, trigger, debug_msg)",
      "}",
      "end"
    ]
  },
  "join": {
    "requirements": [
      {
        "type": "integer",
        "name": "maximum message length",
        "minimum": "0",
        "maximum": "9223372036854775807",
        "hint": "0 to (2^63)-1"
      },
      {
        "type": "abstraction",
        "name": "COLLABORATION",
        "protocol": "/behaviour/tcp-messenger/default/x64"
      }
    ],
    "obligations": [
      {
        "type": "abstraction",
        "name": "application core",
        "protocol": "/system/execution-bundle/default/x64"
      },
      {
        "type": "abstraction",
        "name": "connection activity timeout",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "bind address",
        "protocol": "/data/network-address/default/x64"
      },
      {
        "type": "abstraction",
        "name": "start messenger",
        "protocol": "/data/procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "messenger started",
        "protocol": "/data/flow/default/x64"
      },
      {
        "type": "abstraction",
        "name": "messenger start error code",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "messenger start failed (error code)",
        "protocol": "/data/flow/default/x64"
      },
      {
        "type": "abstraction",
        "name": "stop messenger",
        "protocol": "/data/procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "messenger stopped",
        "protocol": "/data/flow/default/x64"
      },
      {
        "type": "abstraction",
        "name": "stop messenger error code",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "stop messenger failed(error code)",
        "protocol": "/data/flow/default/x64"
      },
      {
        "type": "abstraction",
        "name": "send message token",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "send message address",
        "protocol": "/data/network-address/default/x64"
      },
      {
        "type": "abstraction",
        "name": "message to send",
        "protocol": "/data/bytesequence/default/x64"
      },
      {
        "type": "abstraction",
        "name": "send message procedure",
        "protocol": "/data/procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "send message callback token",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "send message result code",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "message sent (callback token, result code)",
        "protocol": "/data/procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "receive filter address",
        "protocol": "/data/network-address/default/x64"
      },
      {
        "type": "abstraction",
        "name": "add receive whitelist (filter address)",
        "protocol": "/data/procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "add receive blacklist (filter address)",
        "protocol": "/data/procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "received data",
        "protocol": "/data/bytesequence/default/x64"
      },
      {
        "type": "abstraction",
        "name": "received from address",
        "protocol": "/data/network-address/default/x64"
      },
      {
        "type": "abstraction",
        "name": "data received",
        "protocol": "/data/flow/default/x64"
      }
    ],
    "macro": [
      "def (acs, maximum_message_length, self, application_core, connection_activity_timeout, bind_address, start_messenger, messenger_started, messenger_start_error_code, messenger_start_failed__error_code_, stop_messenger, messenger_stopped, stop_messenger_error_code, stop_messenger_failed_error_code_, send_message_token, send_message_address, message_to_send, send_message_procedure, send_message_callback_token, send_message_result_code, message_sent__callback_token__result_code_, receive_filter_address, add_receive_whitelist__filter_address_, add_receive_blacklist__filter_address_, received_data, received_from_address, data_received,  trigger, debug_msg) :",
      "sub /behaviour/add/collaboration-endpoint/join/x64@codevalley( acs, self, trigger, debug_msg) -> {",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, application_core, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, connection_activity_timeout, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, bind_address, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, start_messenger, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, messenger_started, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, messenger_start_error_code, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, messenger_start_failed__error_code_, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, stop_messenger, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, messenger_stopped, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, stop_messenger_error_code, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, stop_messenger_failed_error_code_, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, send_message_token, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, send_message_address, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, message_to_send, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, send_message_procedure, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, send_message_callback_token, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, send_message_result_code, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, message_sent__callback_token__result_code_, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, receive_filter_address, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, add_receive_whitelist__filter_address_, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, add_receive_blacklist__filter_address_, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, received_data, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, received_from_address, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, data_received, trigger, debug_msg)",
      "sub /behaviour/fold/agent-integer/maximum/x64@codevalley( acs, $, maximum_message_length, trigger, debug_msg)",
      "}",
      "end"
    ]
  }
}
