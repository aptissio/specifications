{
  "type": "protocol",
  "policy": 0,
  "name": "/data/list/default/x64",
  "description": [
    "Model an ordered list of items with runtime-variable length, where items are *not* addressable by index.",
    "",
    "",
    "",
    "****level 2 protocol****",
    "",
    "The [/data/list/default/x64](/valley/view/data/list/default/x64) protocol designs a variable-length, static collection of multiple [/data/structure/default/x64](/valley/view/data/structure/default/x64) elements, where each element may comprise different data types. (\"Element\" refers basically to a single row\\*item in a list.)",
    "",
    "To reserve a new list, use [/data/new/list/reserve/x64](/valley/view/data/new/list/reserve/x64) , specifying the `maximum elements`, and define the data types grouped within each element using `new/*/subordinate`. (Note that initialisation of each element must be carried out separately.) Key agents that use the [/data/list/default/x64](/valley/view/data/list/default/x64) protocol include: [/data/add/to-list/default/x64](/valley/view/data/add/to-list/default/x64) and [/data/remove/from-list/default/x64](/valley/view/data/remove/from-list/default/x64) , [/data/check/list/default/x64](/valley/view/data/check/list/default/x64) , [/data/iterate/over-list/default/x64](/valley/view/data/iterate/over-list/default/x64) and [/data/clear/list/default/x64](/valley/view/data/clear/list/default/x64) , among others. ",
    "",
    "An example program showing how agents use the [/data/list/default/x64](/valley/view/data/list/default/x64) protocol to design and manipulate a list is shown below."
  ],
  "host": {
    "requirements": [
      {
        "type": "abstraction",
        "name": "length",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "integer",
        "name": "maximum length",
        "minimum": "0",
        "maximum": "9223372036854775807",
        "hint": "0 to (2^63)-1"
      },
      {
        "type": "abstraction",
        "name": "values",
        "protocol": "/data/array/default/x64"
      }
    ],
    "obligations": [
      {
        "type": "abstraction",
        "name": "<self>",
        "protocol": "/data/list/default/x64"
      }
    ],
    "macro": [
      "def (acs, length, max_length, values, list, trigger, debug_msg):",
      "  sub /behaviour/add/collaboration-endpoint/host/x64@codevalley( acs, list, trigger, debug_msg) -> {",
      "    sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, length, trigger, debug_msg)",
      "    sub /behaviour/dictate/agent-integer/default/x64@codevalley( acs, $, max_length, trigger, debug_msg)",
      "    sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, values, trigger, debug_msg)",
      "  }",
      "end"
    ]
  },
  "join": {
    "requirements": [
      {
        "type": "abstraction",
        "name": "<self>",
        "protocol": "/data/list/default/x64"
      }
    ],
    "obligations": [
      {
        "type": "integer",
        "name": "maximum length",
        "minimum": "0",
        "maximum": "9223372036854775807",
        "hint": "0 to (2^63)-1"
      },
      {
        "type": "abstraction",
        "name": "length",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "values",
        "protocol": "/data/array/default/x64"
      }
    ],
    "macro": [
      "def (acs, list, max_length, length, values, trigger, debug_msg):",
      "  sub /behaviour/add/collaboration-endpoint/join/x64@codevalley( acs, list, trigger, debug_msg) -> {",
      "    sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, length, trigger, debug_msg)",
      "    sub /behaviour/accept/agent-integer/default/x64@codevalley( acs, $, max_length, trigger, debug_msg)",
      "    sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, values, trigger, debug_msg)",
      "  }",
      "end"
    ]
  }
}
