{
  "type": "protocol",
  "policy": 0,
  "name": "/data/bitcoin-public-key-map/default/x64",
  "description": [
    ""
  ],
  "host": {
    "requirements": [
      {
        "type": "abstraction",
        "name": "target account number",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "target key chain index",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "target public key hash",
        "protocol": "/data/bytes/default/x64"
      },
      {
        "type": "abstraction",
        "name": "public key map",
        "protocol": "/data/sorted-map/default/x64"
      },
      {
        "type": "abstraction",
        "name": "account number",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "key chain index",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "public key hash",
        "protocol": "/data/bytes/default/x64"
      },
      {
        "type": "abstraction",
        "name": "key child number",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "public key",
        "protocol": "/data/finite-field-elliptic-curve-point/default/x64"
      },
      {
        "type": "abstraction",
        "name": "encoded public key",
        "protocol": "/data/bytesequence/default/x64"
      },
      {
        "type": "abstraction",
        "name": "bitcoin address",
        "protocol": "/data/bitcoin-address/default/x64"
      },
      {
        "type": "abstraction",
        "name": "encoded cash address",
        "protocol": "/data/bytesequence/default/x64"
      },
      {
        "type": "abstraction",
        "name": "key balance",
        "protocol": "/data/unsigned-integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "key used",
        "protocol": "/data/flag/default/x64"
      }
    ],
    "obligations": [
      {
        "type": "integer",
        "name": "minimum account number",
        "minimum": "0",
        "maximum": "9223372036854775807",
        "hint": "0 to (2^63)-1"
      },
      {
        "type": "integer",
        "name": "maximum account number",
        "minimum": "0",
        "maximum": "9223372036854775807",
        "hint": "0 to (2^63)-1"
      },
      {
        "type": "integer",
        "name": "minimum key chain index",
        "minimum": "0",
        "maximum": "9223372036854775807",
        "hint": "0 to (2^63)-1"
      },
      {
        "type": "integer",
        "name": "maximum key chain index",
        "minimum": "0",
        "maximum": "9223372036854775807",
        "hint": "0 to (2^63)-1"
      },
      {
        "type": "abstraction",
        "name": "COLLABORATION",
        "protocol": "/data/bitcoin-public-key-map/default/x64"
      }
    ],
    "macro": [
      "def (acs, target_account_number, target_key_chain_index, target_public_key_hash, public_key_map, account_number, key_chain_index, public_key_hash, key_child_number, public_key, encoded_public_key, bitcoin_address, encoded_cash_address, key_balance, key_used, minimum_account_number, maximum_account_number, minimum_key_chain_index, maximum_key_chain_index, self, trigger, debug_msg) :",
      "sub /behaviour/add/collaboration-endpoint/host/x64@codevalley( acs, self, trigger, debug_msg) -> {",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, target_account_number, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, target_key_chain_index, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, target_public_key_hash, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, public_key_map, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, account_number, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, key_chain_index, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, public_key_hash, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, key_child_number, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, public_key, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, encoded_public_key, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, bitcoin_address, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, encoded_cash_address, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, key_balance, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, key_used, trigger, debug_msg)",
      "sub /behaviour/collect/agent-integer/minimum/x64@codevalley( acs, $, minimum_account_number, trigger, debug_msg)",
      "sub /behaviour/collect/agent-integer/maximum/x64@codevalley( acs, $, maximum_account_number, trigger, debug_msg)",
      "sub /behaviour/collect/agent-integer/minimum/x64@codevalley( acs, $, minimum_key_chain_index, trigger, debug_msg)",
      "sub /behaviour/collect/agent-integer/maximum/x64@codevalley( acs, $, maximum_key_chain_index, trigger, debug_msg)",
      "}",
      "end"
    ]
  },
  "join": {
    "requirements": [
      {
        "type": "integer",
        "name": "minimum account number",
        "minimum": "0",
        "maximum": "9223372036854775807",
        "hint": "0 to (2^63)-1"
      },
      {
        "type": "integer",
        "name": "maximum account number",
        "minimum": "0",
        "maximum": "9223372036854775807",
        "hint": "0 to (2^63)-1"
      },
      {
        "type": "integer",
        "name": "minimum key chain index",
        "minimum": "0",
        "maximum": "9223372036854775807",
        "hint": "0 to (2^63)-1"
      },
      {
        "type": "integer",
        "name": "maximum key chain index",
        "minimum": "0",
        "maximum": "9223372036854775807",
        "hint": "0 to (2^63)-1"
      },
      {
        "type": "abstraction",
        "name": "COLLABORATION",
        "protocol": "/data/bitcoin-public-key-map/default/x64"
      }
    ],
    "obligations": [
      {
        "type": "abstraction",
        "name": "target account number",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "target key chain index",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "target public key hash",
        "protocol": "/data/bytes/default/x64"
      },
      {
        "type": "abstraction",
        "name": "public key map",
        "protocol": "/data/sorted-map/default/x64"
      },
      {
        "type": "abstraction",
        "name": "account number",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "key chain index",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "public key hash",
        "protocol": "/data/bytes/default/x64"
      },
      {
        "type": "abstraction",
        "name": "key child number",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "public key",
        "protocol": "/data/finite-field-elliptic-curve-point/default/x64"
      },
      {
        "type": "abstraction",
        "name": "encoded public key",
        "protocol": "/data/bytesequence/default/x64"
      },
      {
        "type": "abstraction",
        "name": "bitcoin address",
        "protocol": "/data/bitcoin-address/default/x64"
      },
      {
        "type": "abstraction",
        "name": "encoded cash address",
        "protocol": "/data/bytesequence/default/x64"
      },
      {
        "type": "abstraction",
        "name": "key balance",
        "protocol": "/data/unsigned-integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "key used",
        "protocol": "/data/flag/default/x64"
      }
    ],
    "macro": [
      "def (acs, minimum_account_number, maximum_account_number, minimum_key_chain_index, maximum_key_chain_index, self, target_account_number, target_key_chain_index, target_public_key_hash, public_key_map, account_number, key_chain_index, public_key_hash, key_child_number, public_key, encoded_public_key, bitcoin_address, encoded_cash_address, key_balance, key_used,  trigger, debug_msg) :",
      "sub /behaviour/add/collaboration-endpoint/join/x64@codevalley( acs, self, trigger, debug_msg) -> {",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, target_account_number, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, target_key_chain_index, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, target_public_key_hash, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, public_key_map, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, account_number, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, key_chain_index, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, public_key_hash, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, key_child_number, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, public_key, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, encoded_public_key, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, bitcoin_address, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, encoded_cash_address, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, key_balance, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, key_used, trigger, debug_msg)",
      "sub /behaviour/fold/agent-integer/minimum/x64@codevalley( acs, $, minimum_account_number, trigger, debug_msg)",
      "sub /behaviour/fold/agent-integer/maximum/x64@codevalley( acs, $, maximum_account_number, trigger, debug_msg)",
      "sub /behaviour/fold/agent-integer/minimum/x64@codevalley( acs, $, minimum_key_chain_index, trigger, debug_msg)",
      "sub /behaviour/fold/agent-integer/maximum/x64@codevalley( acs, $, maximum_key_chain_index, trigger, debug_msg)",
      "}",
      "end"
    ]
  }
}
