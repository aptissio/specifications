{
  "type": "protocol",
  "policy": 0,
  "name": "/data/http-headers/default/x64",
  "description": [
    "Http headers protocol.",
    "",
    "`adding or iterating header name` is used to set header name or look for in headers",
    "",
    "`adding header value` is used to set the header value",
    "",
    "`found header name`, `found header value` are the header name, value respectively of the header found in iteration process",
    "",
    "`add header procedure` provides procedure to add the header to protocol",
    "",
    "`iterate headers procedure` provides iteration process",
    "",
    "`header each or success procedure` is space for client to put work in each or success flow",
    "",
    "`header empty or failure procedure` is space for client to put work in empty or failure flow",
    "",
    "`filter enable flag` if set filter is enabled, if cleared iteration process provides all headers",
    "",
    "`delete flag` if set the found headers will be deleted",
    "",
    "`stop flag` if set, the iteration stops after first header found",
    "",
    "`header name length maximum`, `header value length maximum` maximum length of header name, value respectively",
    "",
    "`header capacity` how many headers are expected to calculate how many needs to be allocated"
  ],
  "host": {
    "requirements": [
      {
        "type": "abstraction",
        "name": "add or iterate header name",
        "protocol": "/data/bytesequence/default/x64"
      },
      {
        "type": "abstraction",
        "name": "add header value",
        "protocol": "/data/bytesequence/default/x64"
      },
      {
        "type": "abstraction",
        "name": "found header name",
        "protocol": "/data/bytesequence/default/x64"
      },
      {
        "type": "abstraction",
        "name": "found header value",
        "protocol": "/data/bytesequence/default/x64"
      },
      {
        "type": "abstraction",
        "name": "add header procedure",
        "protocol": "/data/procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "iterate headers procedure",
        "protocol": "/data/procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "header each or success procedure",
        "protocol": "/data/procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "header empty or failure procedure",
        "protocol": "/data/procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "filter enable flag",
        "protocol": "/data/flag/default/x64"
      },
      {
        "type": "abstraction",
        "name": "delete flag",
        "protocol": "/data/flag/default/x64"
      },
      {
        "type": "abstraction",
        "name": "stop flag",
        "protocol": "/data/flag/default/x64"
      }
    ],
    "obligations": [
      {
        "type": "integer",
        "name": "header name length maximum",
        "minimum": "0",
        "maximum": "9223372036854775807",
        "hint": "0 to (2^63)-1"
      },
      {
        "type": "integer",
        "name": "header value length maximum",
        "minimum": "0",
        "maximum": "9223372036854775807",
        "hint": "0 to (2^63)-1"
      },
      {
        "type": "integer",
        "name": "header capacity",
        "minimum": "0",
        "maximum": "9223372036854775807",
        "hint": "0 to (2^63)-1"
      },
      {
        "type": "abstraction",
        "name": "COLLABORATION",
        "protocol": "/data/http-headers/default/x64"
      }
    ],
    "macro": [
      "def (acs, add_or_iterate_header_name, add_header_value, found_header_name, found_header_value, add_header_procedure, iterate_headers_procedure, header_each_or_success_procedure, header_empty_or_failure_procedure, filter_enable_flag, delete_flag, stop_flag, header_name_length_maximum, header_value_length_maximum, header_capacity, self, trigger, debug_msg) :",
      "sub /behaviour/add/collaboration-endpoint/host/x64@codevalley( acs, self, trigger, debug_msg) -> {",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, add_or_iterate_header_name, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, add_header_value, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, found_header_name, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, found_header_value, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, add_header_procedure, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, iterate_headers_procedure, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, header_each_or_success_procedure, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, header_empty_or_failure_procedure, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, filter_enable_flag, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, delete_flag, trigger, debug_msg)",
      "sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, stop_flag, trigger, debug_msg)",
      "sub /behaviour/collect/agent-integer/maximum/x64@codevalley( acs, $, header_name_length_maximum, trigger, debug_msg)",
      "sub /behaviour/collect/agent-integer/maximum/x64@codevalley( acs, $, header_value_length_maximum, trigger, debug_msg)",
      "sub /behaviour/collect/agent-integer/default/x64@codevalley( acs, $, header_capacity, trigger, debug_msg)",
      "}",
      "end"
    ]
  },
  "join": {
    "requirements": [
      {
        "type": "integer",
        "name": "header name length maximum",
        "minimum": "0",
        "maximum": "9223372036854775807",
        "hint": "0 to (2^63)-1"
      },
      {
        "type": "integer",
        "name": "header value length maximum",
        "minimum": "0",
        "maximum": "9223372036854775807",
        "hint": "0 to (2^63)-1"
      },
      {
        "type": "integer",
        "name": "header capacity",
        "minimum": "0",
        "maximum": "9223372036854775807",
        "hint": "0 to (2^63)-1"
      },
      {
        "type": "abstraction",
        "name": "COLLABORATION",
        "protocol": "/data/http-headers/default/x64"
      }
    ],
    "obligations": [
      {
        "type": "abstraction",
        "name": "add or iterate header name",
        "protocol": "/data/bytesequence/default/x64"
      },
      {
        "type": "abstraction",
        "name": "add header value",
        "protocol": "/data/bytesequence/default/x64"
      },
      {
        "type": "abstraction",
        "name": "found header name",
        "protocol": "/data/bytesequence/default/x64"
      },
      {
        "type": "abstraction",
        "name": "found header value",
        "protocol": "/data/bytesequence/default/x64"
      },
      {
        "type": "abstraction",
        "name": "add header procedure",
        "protocol": "/data/procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "iterate headers procedure",
        "protocol": "/data/procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "header each or success procedure",
        "protocol": "/data/procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "header empty or failure procedure",
        "protocol": "/data/procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "filter enable flag",
        "protocol": "/data/flag/default/x64"
      },
      {
        "type": "abstraction",
        "name": "delete flag",
        "protocol": "/data/flag/default/x64"
      },
      {
        "type": "abstraction",
        "name": "stop flag",
        "protocol": "/data/flag/default/x64"
      }
    ],
    "macro": [
      "def (acs, header_name_length_maximum, header_value_length_maximum, header_capacity, self, add_or_iterate_header_name, add_header_value, found_header_name, found_header_value, add_header_procedure, iterate_headers_procedure, header_each_or_success_procedure, header_empty_or_failure_procedure, filter_enable_flag, delete_flag, stop_flag,  trigger, debug_msg) :",
      "sub /behaviour/add/collaboration-endpoint/join/x64@codevalley( acs, self, trigger, debug_msg) -> {",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, add_or_iterate_header_name, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, add_header_value, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, found_header_name, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, found_header_value, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, add_header_procedure, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, iterate_headers_procedure, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, header_each_or_success_procedure, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, header_empty_or_failure_procedure, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, filter_enable_flag, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, delete_flag, trigger, debug_msg)",
      "sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, stop_flag, trigger, debug_msg)",
      "sub /behaviour/fold/agent-integer/maximum/x64@codevalley( acs, $, header_name_length_maximum, trigger, debug_msg)",
      "sub /behaviour/fold/agent-integer/maximum/x64@codevalley( acs, $, header_value_length_maximum, trigger, debug_msg)",
      "sub /behaviour/fold/agent-integer/default/x64@codevalley( acs, $, header_capacity, trigger, debug_msg)",
      "}",
      "end"
    ]
  }
}
