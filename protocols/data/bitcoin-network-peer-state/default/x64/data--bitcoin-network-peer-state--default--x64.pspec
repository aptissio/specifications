{
  "type": "protocol",
  "policy": 0,
  "name": "/data/bitcoin-network-peer-state/default/x64",
  "description": [
    "A protocol used to design the state of a Bitcoin network peer."
  ],
  "host": {
    "requirements": [
      {
        "type": "abstraction",
        "name": "network address",
        "protocol": "/data/network-address/default/x64"
      },
      {
        "type": "abstraction",
        "name": "connected",
        "protocol": "/data/flag/default/x64"
      },
      {
        "type": "abstraction",
        "name": "connection ID",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "time last connected",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "time last received data",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "time last sent data",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "outbound connection",
        "protocol": "/data/flag/default/x64"
      },
      {
        "type": "abstraction",
        "name": "network version",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "user agent string",
        "protocol": "/data/bytesequence/default/x64"
      },
      {
        "type": "abstraction",
        "name": "time difference",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "transmitting services",
        "protocol": "/data/bit-array/default/x64"
      },
      {
        "type": "abstraction",
        "name": "receiving services",
        "protocol": "/data/bit-array/default/x64"
      },
      {
        "type": "abstraction",
        "name": "transmitting network address",
        "protocol": "/data/network-address/default/x64"
      },
      {
        "type": "abstraction",
        "name": "receiving network address",
        "protocol": "/data/network-address/default/x64"
      },
      {
        "type": "abstraction",
        "name": "transaction relay",
        "protocol": "/data/flag/default/x64"
      },
      {
        "type": "abstraction",
        "name": "starting block",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "synced header count",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "synced block count",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "whitelisted",
        "protocol": "/data/flag/default/x64"
      },
      {
        "type": "abstraction",
        "name": "ban score",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "transmitted byte count",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "received byte count",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "ping time",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "peer status",
        "protocol": "/data/bytesequence/default/x64"
      },
      {
        "type": "abstraction",
        "name": "state context",
        "protocol": "/data/structure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "intialise context",
        "protocol": "/data/flow/default/x64"
      }
    ],
    "obligations": [
      {
        "type": "abstraction",
        "name": "<self>",
        "protocol": "/data/bitcoin-network-peer-state/default/x64"
      }
    ],
    "macro": [
      "def(acs, network_address, connected_flag, connection_id, time_last_connected, time_last_rx, time_last_tx, outbound_connection_flag, network_version, ua_string, time_difference, peer_tx_services, peer_rx_services, peer_tx_network_address, peer_rx_network_address, peer_tx_relay, starting_block, synced_header_count, synced_block_count, whitelisted_flag, ban_score, tx_byte_count, rx_byte_count, time_ping, peer_status, state_context, intialise_context, chain_inout, trigger, debug_msg):",
      "sub /behaviour/add/collaboration-endpoint/host/x64@codevalley( acs, chain_inout, trigger, debug_msg) -> {",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, network_address, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, connected_flag, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, connection_id, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, time_last_connected, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, time_last_rx, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, time_last_tx, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, outbound_connection_flag, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, network_version, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, ua_string, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, time_difference, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, peer_tx_services, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, peer_rx_services, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, peer_tx_network_address, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, peer_rx_network_address, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, peer_tx_relay, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, starting_block, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, synced_header_count, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, synced_block_count, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, whitelisted_flag, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, ban_score, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, tx_byte_count, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, rx_byte_count, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, time_ping, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, peer_status, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, state_context, trigger, debug_msg)",
      " sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, intialise_context, trigger, debug_msg)",
      "  }",
      "end "
    ]
  },
  "join": {
    "requirements": [
      {
        "type": "abstraction",
        "name": "<self>",
        "protocol": "/data/bitcoin-network-peer-state/default/x64"
      }
    ],
    "obligations": [
      {
        "type": "abstraction",
        "name": "network address",
        "protocol": "/data/network-address/default/x64"
      },
      {
        "type": "abstraction",
        "name": "connected",
        "protocol": "/data/flag/default/x64"
      },
      {
        "type": "abstraction",
        "name": "connection ID",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "time last connected",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "time last received data",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "time last sent data",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "outbound connection",
        "protocol": "/data/flag/default/x64"
      },
      {
        "type": "abstraction",
        "name": "network version",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "user agent string",
        "protocol": "/data/bytesequence/default/x64"
      },
      {
        "type": "abstraction",
        "name": "time difference",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "transmitting services",
        "protocol": "/data/bit-array/default/x64"
      },
      {
        "type": "abstraction",
        "name": "receiving services",
        "protocol": "/data/bit-array/default/x64"
      },
      {
        "type": "abstraction",
        "name": "transmitting network address",
        "protocol": "/data/network-address/default/x64"
      },
      {
        "type": "abstraction",
        "name": "receiving network address",
        "protocol": "/data/network-address/default/x64"
      },
      {
        "type": "abstraction",
        "name": "transaction relay",
        "protocol": "/data/flag/default/x64"
      },
      {
        "type": "abstraction",
        "name": "starting block",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "synced header count",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "synced block count",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "whitelisted",
        "protocol": "/data/flag/default/x64"
      },
      {
        "type": "abstraction",
        "name": "ban score",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "transmitted byte count",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "received byte count",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "ping time",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "peer status",
        "protocol": "/data/bytesequence/default/x64"
      },
      {
        "type": "abstraction",
        "name": "state context",
        "protocol": "/data/structure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "intialise context",
        "protocol": "/data/flow/default/x64"
      }
    ],
    "macro": [
      "def(acs, chain_inout, network_address, connected_flag, connection_id, time_last_connected, time_last_rx, time_last_tx, outbound_connection_flag, network_version, ua_string, time_difference, peer_tx_services, peer_rx_services, peer_tx_network_address, peer_rx_network_address, peer_tx_relay, starting_block, synced_header_count, synced_block_count, whitelisted_flag, ban_score, tx_byte_count, rx_byte_count, time_ping, peer_status, state_context, intialise_context, trigger, debug_msg):",
      "sub /behaviour/add/collaboration-endpoint/join/x64@codevalley( acs, chain_inout, trigger, debug_msg) -> {",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, network_address, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, connected_flag, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, connection_id, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, time_last_connected, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, time_last_rx, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, time_last_tx, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, outbound_connection_flag, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, network_version, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, ua_string, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, time_difference, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, peer_tx_services, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, peer_rx_services, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, peer_tx_network_address, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, peer_rx_network_address, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, peer_tx_relay, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, starting_block, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, synced_header_count, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, synced_block_count, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, whitelisted_flag, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, ban_score, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, tx_byte_count, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, rx_byte_count, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, time_ping, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, peer_status, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, state_context, trigger, debug_msg)",
      " sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, intialise_context, trigger, debug_msg)",
      "  }",
      "end "
    ]
  }
}
