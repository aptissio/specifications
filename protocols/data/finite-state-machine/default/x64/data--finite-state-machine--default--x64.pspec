{"name": "/data/finite-state-machine/default/x64",
"type": "protocol",
"policy":"0",
"description":[""],
"host": {
"requirements": [
{"name":  "machine init",
"type": "abstraction",
"protocol": "/data/flow/default/x64"},
{"name":  "state and transition init",
"type": "abstraction",
"protocol": "/data/flow/default/x64"},
{"name":  "current state ID",
"type": "abstraction",
"protocol": "/data/integer/default/x64"},
{"name":  "current state description",
"type": "abstraction",
"protocol": "/data/bytesequence/default/x64"},
{"name":  "fsm states",
"type": "abstraction",
"protocol": "/data/finite-state-machine-states/default/x64"},
{"name":  "fsm events",
"type": "abstraction",
"protocol": "/data/finite-state-machine-events/default/x64"},
{"name":  "transition event ID",
"type": "abstraction",
"protocol": "/data/integer/default/x64"},
{"name":  "transition incomplete",
"type": "abstraction",
"protocol": "/data/flag/default/x64"},
{"name":  "transition guard",
"type": "abstraction",
"protocol": "/data/procedure/default/x64"},
{"name":  "transition action",
"type": "abstraction",
"protocol": "/data/procedure/default/x64"},
{"name":  "transition from stateid",
"type": "abstraction",
"protocol": "/data/integer/default/x64"},
{"name":  "transition to stateid",
"type": "abstraction",
"protocol": "/data/integer/default/x64"},
{"name":  "register transition event ",
"type": "abstraction",
"protocol": "/data/procedure/default/x64"},
{"name":  "event transition initialise",
"type": "abstraction",
"protocol": "/data/flow/default/x64"},
{"name":  "fsm event trigger",
"type": "abstraction",
"protocol": "/data/procedure/default/x64"},
{"name":  "unhandled event notification",
"type": "abstraction",
"protocol": "/data/flow/default/x64"},
{"name":  "reset fsm",
"type": "abstraction",
"protocol": "/data/procedure/default/x64"},
{"name":  "state end",
"type": "integer",
"minimum": "0",
"maximum": "9223372036854775807",
"hint": "0 to (2^63)-1"}
],
"obligations": [
{"name": "<self>",
"type": "abstraction",
"protocol": "/data/finite-state-machine/default/x64"}
], 
"macro":  ["def (acs, machine_init, state_and_transition_init, current_state_ID, current_state_description, fsm_states, fsm_events, transition_event_ID, transition_incomplete, transition_guard, transition_action, transition_from_stateid, transition_to_stateid, register_transition_event_, event_transition_initialise, fsm_event_trigger, unhandled_event_notification, reset_fsm, state_end, self, trigger, debug_msg) :",
"sub /behaviour/add/collaboration-endpoint/host/x64@codevalley(acs, self, trigger, debug_msg) -> {",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, machine_init, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, state_and_transition_init, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, current_state_ID, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, current_state_description, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, fsm_states, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, fsm_events, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, transition_event_ID, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, transition_incomplete, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, transition_guard, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, transition_action, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, transition_from_stateid, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, transition_to_stateid, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, register_transition_event_, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, event_transition_initialise, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, fsm_event_trigger, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, unhandled_event_notification, trigger, debug_msg)",
"sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley(acs, $, reset_fsm, trigger, debug_msg)",
"sub /behaviour/dictate/agent-integer/default/x64@codevalley(acs, $, state_end, trigger, debug_msg)",
"}",
"end"]
},
"join": {
"requirements": [
{"name": "<self>",
"type": "abstraction",
"protocol": "/data/finite-state-machine/default/x64"}
],
"obligations": [
{"name":  "machine init",
"type": "abstraction",
"protocol": "/data/flow/default/x64"},
{"name":  "state and transition init",
"type": "abstraction",
"protocol": "/data/flow/default/x64"},
{"name":  "current state ID",
"type": "abstraction",
"protocol": "/data/integer/default/x64"},
{"name":  "current state description",
"type": "abstraction",
"protocol": "/data/bytesequence/default/x64"},
{"name":  "fsm states",
"type": "abstraction",
"protocol": "/data/finite-state-machine-states/default/x64"},
{"name":  "fsm events",
"type": "abstraction",
"protocol": "/data/finite-state-machine-events/default/x64"},
{"name":  "transition event ID",
"type": "abstraction",
"protocol": "/data/integer/default/x64"},
{"name":  "transition incomplete",
"type": "abstraction",
"protocol": "/data/flag/default/x64"},
{"name":  "transition guard",
"type": "abstraction",
"protocol": "/data/procedure/default/x64"},
{"name":  "transition action",
"type": "abstraction",
"protocol": "/data/procedure/default/x64"},
{"name":  "transition from stateid",
"type": "abstraction",
"protocol": "/data/integer/default/x64"},
{"name":  "transition to stateid",
"type": "abstraction",
"protocol": "/data/integer/default/x64"},
{"name":  "register transition event ",
"type": "abstraction",
"protocol": "/data/procedure/default/x64"},
{"name":  "event transition initialise",
"type": "abstraction",
"protocol": "/data/flow/default/x64"},
{"name":  "fsm event trigger",
"type": "abstraction",
"protocol": "/data/procedure/default/x64"},
{"name":  "unhandled event notification",
"type": "abstraction",
"protocol": "/data/flow/default/x64"},
{"name":  "reset fsm",
"type": "abstraction",
"protocol": "/data/procedure/default/x64"},
{"name":  "state end",
"type": "integer",
"minimum": "0",
"maximum": "9223372036854775807",
"hint": "0 to (2^63)-1"}
],
"macro":  ["def (acs, self, machine_init, state_and_transition_init, current_state_ID, current_state_description, fsm_states, fsm_events, transition_event_ID, transition_incomplete, transition_guard, transition_action, transition_from_stateid, transition_to_stateid, register_transition_event_, event_transition_initialise, fsm_event_trigger, unhandled_event_notification, reset_fsm, state_end,  trigger, debug_msg) :",
"sub /behaviour/add/collaboration-endpoint/join/x64@codevalley(acs, self, trigger, debug_msg) -> {",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, machine_init, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, state_and_transition_init, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, current_state_ID, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, current_state_description, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, fsm_states, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, fsm_events, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, transition_event_ID, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, transition_incomplete, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, transition_guard, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, transition_action, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, transition_from_stateid, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, transition_to_stateid, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, register_transition_event_, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, event_transition_initialise, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, fsm_event_trigger, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, unhandled_event_notification, trigger, debug_msg)",
"sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley(acs, $, reset_fsm, trigger, debug_msg)",
"sub /behaviour/accept/agent-integer/default/x64@codevalley(acs, $, state_end, trigger, debug_msg)",
"}",
"end"]
}
}
