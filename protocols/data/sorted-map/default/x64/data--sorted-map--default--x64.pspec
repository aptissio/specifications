{
  "type": "protocol",
  "policy": 0,
  "name": "/data/sorted-map/default/x64",
  "description": [
    "Store a \"totally ordered set\" of items, ordered by custom-defined comparison operations. Each item is addressable as defined by the same comparisons.",
    "",
    "",
    "",
    "****level 3 protocol****",
    "",
    "The [/data/sorted-map/default/x64](/valley/view/data/sorted-map/default/x64) protocol designs an associative container for storing elements formed by a combination of a key value and a mapped value, following a specific order. The key values are generally used to sort and uniquely identify the elements, while the mapped values store the content associated to this key. ",
    "",
    "To reserve a new sorted map, use [/data/new/sorted-map/reserve/x64](/valley/view/data/new/sorted-map/reserve/x64) , specifying the `capacity`, and define the key and mapped value data types stored on each element using `new/*/subordinate`. (Note that initialisation of each element must be carried out separately.) The custom comparison functions for sorting based on key value are usually also supplied upon creation of a new sorted map. Key agents that use the [/data/sorted-map/default/x64](/valley/view/data/sorted-map/default/x64) protocol include: [/data/add/sorted-map/default/x64](/valley/view/data/add/sorted-map/default/x64) , [/data/remove/sorted-map/default/x64](/valley/view/data/remove/sorted-map/default/x64) , [/data/check/sorted-map/default/x64](/valley/view/data/check/sorted-map/default/x64) , [/data/lookup/sorted-map/default/x64](/valley/view/data/lookup/sorted-map/default/x64) , [/data/iterate/sorted-map/default/x64](/valley/view/data/iterate/sorted-map/default/x64) and [/data/clear/sorted-map/default/x64](/valley/view/data/clear/sorted-map/default/x64) , among others. ",
    "",
    "An example program showing how agents use the [/data/sorted-map/default/x64](/valley/view/data/sorted-map/default/x64) protocol to design and manipulate a sorted map is shown below."
  ],
  "host": {
    "requirements": [
      {
        "type": "integer",
        "name": "maximum length",
        "minimum": "1",
        "maximum": "9223372036854775807",
        "hint": "1 to (2^63)-1"
      },
      {
        "type": "abstraction",
        "name": "length",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "lesser or equal",
        "protocol": "/data/boolean-procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "greater or equal",
        "protocol": "/data/boolean-procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "values",
        "protocol": "/data/array/default/x64"
      }
    ],
    "obligations": [
      {
        "type": "abstraction",
        "name": "<self>",
        "protocol": "/data/sorted-map/default/x64"
      }
    ],
    "macro": [
      "def (acs, max_length, length, le, ge, values, sorted_map, trigger, debug_msg):",
      "  sub /behaviour/add/collaboration-endpoint/host/x64@codevalley( acs, sorted_map, trigger, debug_msg) -> {",
      "    sub /behaviour/dictate/agent-integer/default/x64@codevalley( acs, $, max_length, trigger, debug_msg)",
      "    sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, length, trigger, debug_msg)",
      "    sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, le, trigger, debug_msg)",
      "    sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, ge, trigger, debug_msg)",
      "    sub /behaviour/collect-and-distribute/agent-group/default/x64@codevalley( acs, $, values, trigger, debug_msg)",
      "  }",
      "end"
    ]
  },
  "join": {
    "requirements": [
      {
        "type": "abstraction",
        "name": "<self>",
        "protocol": "/data/sorted-map/default/x64"
      }
    ],
    "obligations": [
      {
        "type": "integer",
        "name": "maximum length",
        "minimum": "1",
        "maximum": "9223372036854775807",
        "hint": "1 to (2^63)-1"
      },
      {
        "type": "abstraction",
        "name": "length",
        "protocol": "/data/integer/default/x64"
      },
      {
        "type": "abstraction",
        "name": "lesser or equal",
        "protocol": "/data/boolean-procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "greater or equal",
        "protocol": "/data/boolean-procedure/default/x64"
      },
      {
        "type": "abstraction",
        "name": "values",
        "protocol": "/data/array/default/x64"
      }
    ],
    "macro": [
      "def (acs, sorted_map, max_length, length, le, ge, values, trigger, debug_msg):",
      "  sub /behaviour/add/collaboration-endpoint/join/x64@codevalley( acs, sorted_map, trigger, debug_msg) -> {",
      "    sub /behaviour/accept/agent-integer/default/x64@codevalley( acs, $, max_length, trigger, debug_msg)",
      "    sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, length, trigger, debug_msg)",
      "    sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, le, trigger, debug_msg)",
      "    sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, ge, trigger, debug_msg)",
      "    sub /behaviour/fold-and-allocate/agent-group/default/x64@codevalley( acs, $, values, trigger, debug_msg)",
      "  }",
      "end"
    ]
  }
}
